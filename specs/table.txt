Run this with `cargo run -- -T -s specs/table.txt`.

Adapted from original by replacing `td` elements by `th` elements inside `thead`
and disabling the third test.

False match
===========

```````````````````````````````` example
Test header
-----------
.
<h2>Test header</h2>
````````````````````````````````


True match
==========

```````````````````````````````` example
Test|Table
----|-----
.
<table><thead><tr><th>Test</th><th>Table</th></tr></thead>
</table>
````````````````````````````````


Actual rows in it
=================

```````````````````````````````` DISABLED example
Test|Table
----|-----
Test row
Test|2

Test ending
.
<table><thead><tr><th>Test</th><th>Table</th></tr></thead>
<tr><td>Test row</td></tr>
<tr><td>Test</td><td>2</td></tr>
</table>
<p>Test ending</p>
````````````````````````````````


Test with quote
===============

```````````````````````````````` example
> Test  | Table
> ------|------
> Row 1 | Every
> Row 2 | Day
>
> Paragraph
.
<blockquote>
<table><thead><tr><th>Test  </th><th> Table</th></tr></thead>
<tr><td>Row 1 </td><td> Every</td></tr>
<tr><td>Row 2 </td><td> Day</td></tr>
</table>
<p>Paragraph</p>
</blockquote>
````````````````````````````````


Test with list
==============

```````````````````````````````` example
 1. First entry
 2. Second entry

    Col 1|Col 2
    -|-
    Row 1|Part 2
    Row 2|Part 2
.
<ol>
<li>
<p>First entry</p>
</li>
<li>
<p>Second entry</p>
<table><thead><tr><th>Col 1</th><th>Col 2</th></tr></thead>
<tr><td>Row 1</td><td>Part 2</td></tr>
<tr><td>Row 2</td><td>Part 2</td></tr>
</table>
</li>
</ol>
````````````````````````````````


Test with border
================

```````````````````````````````` example
|Col 1|Col 2|
|-----|-----|
|R1C1 |R1C2 |
|R2C1 |R2C2 |
.
<table><thead><tr><th>Col 1</th><th>Col 2</th></tr></thead>
<tr><td>R1C1 </td><td>R1C2 </td></tr>
<tr><td>R2C1 </td><td>R2C2 </td></tr>
</table>
````````````````````````````````


Test with empty cells
=====================

Empty cells should work.

```````````````````````````````` example
| Col 1 | Col 2 |
|-------|-------|
|       |       |
|       |       |
.
<table><thead><tr><th> Col 1 </th><th> Col 2 </th></tr></thead>
<tr><td>       </td><td>       </td></tr>
<tr><td>       </td><td>       </td></tr>
</table>
````````````````````````````````

... and properly mix with filled cells.

```````````````````````````````` example
| Col 1 | Col 2 |
|-------|-------|
|   x   |       |
|       |    x  |
.
<table><thead><tr><th> Col 1 </th><th> Col 2 </th></tr></thead>
<tr><td>   x   </td><td>       </td></tr>
<tr><td>       </td><td>    x  </td></tr>
</table>
````````````````````````````````


Table with UTF-8
================

Basic example.

```````````````````````````````` example
|Col 1|Col 2|
|-----|-----|
|✓    |✓    |
|✓    |✓    |
.
<table><thead><tr><th>Col 1</th><th>Col 2</th></tr></thead>
<tr><td>✓    </td><td>✓    </td></tr>
<tr><td>✓    </td><td>✓    </td></tr>
</table>
````````````````````````````````

More advanced example.

```````````````````````````````` example
|  Target                       | std |rustc|cargo| notes                      |
|-------------------------------|-----|-----|-----|----------------------------|
| `x86_64-unknown-linux-musl`   |  ✓  |     |     | 64-bit Linux with MUSL     |
| `arm-linux-androideabi`       |  ✓  |     |     | ARM Android                |
| `arm-unknown-linux-gnueabi`   |  ✓  |  ✓  |     | ARM Linux (2.6.18+)        |
| `arm-unknown-linux-gnueabihf` |  ✓  |  ✓  |     | ARM Linux (2.6.18+)        |
| `aarch64-unknown-linux-gnu`   |  ✓  |     |     | ARM64 Linux (2.6.18+)      |
| `mips-unknown-linux-gnu`      |  ✓  |     |     | MIPS Linux (2.6.18+)       |
| `mipsel-unknown-linux-gnu`    |  ✓  |     |     | MIPS (LE) Linux (2.6.18+)  |
.
<table><thead><tr><th>  Target                       </th><th> std </th><th>rustc</th><th>cargo</th><th> notes                      </th></tr></thead>
<tr><td> <code>x86_64-unknown-linux-musl</code>   </td><td>  ✓  </td><td>     </td><td>     </td><td> 64-bit Linux with MUSL     </td></tr>
<tr><td> <code>arm-linux-androideabi</code>       </td><td>  ✓  </td><td>     </td><td>     </td><td> ARM Android                </td></tr>
<tr><td> <code>arm-unknown-linux-gnueabi</code>   </td><td>  ✓  </td><td>  ✓  </td><td>     </td><td> ARM Linux (2.6.18+)        </td></tr>
<tr><td> <code>arm-unknown-linux-gnueabihf</code> </td><td>  ✓  </td><td>  ✓  </td><td>     </td><td> ARM Linux (2.6.18+)        </td></tr>
<tr><td> <code>aarch64-unknown-linux-gnu</code>   </td><td>  ✓  </td><td>     </td><td>     </td><td> ARM64 Linux (2.6.18+)      </td></tr>
<tr><td> <code>mips-unknown-linux-gnu</code>      </td><td>  ✓  </td><td>     </td><td>     </td><td> MIPS Linux (2.6.18+)       </td></tr>
<tr><td> <code>mipsel-unknown-linux-gnu</code>    </td><td>  ✓  </td><td>     </td><td>     </td><td> MIPS (LE) Linux (2.6.18+)  </td></tr>
</table>
````````````````````````````````

Hiragana-containing pseudo-table.

```````````````````````````````` example
|-|-|
|ぃ|い|
.
<p>|-|-|
|ぃ|い|</p>
````````````````````````````````

Hiragana-containing actual table.

```````````````````````````````` example
|ぁ|ぃ|
|-|-|
|ぃ|ぃ|
.
<table><thead><tr><th>ぁ</th><th>ぃ</th></tr></thead>
<tr><td>ぃ</td><td>ぃ</td></tr>
</table>
````````````````````````````````

Test russian symbols.

```````````````````````````````` example
|Колонка 1|Колонка 2|
|---------|---------|
|Ячейка 1 |Ячейка 2 |
.
<table><thead><tr><th>Колонка 1</th><th>Колонка 2</th></tr></thead>
<tr><td>Ячейка 1 </td><td>Ячейка 2 </td></tr>
</table>
````````````````````````````````


Test cases based on <https://github.com/github/cmark-gfm/issues/180>
and <https://github.com/raphlinus/pulldown-cmark/issues/540>.

Pulldown-cmark gives "heavy" tables (with a leading `|`) higher priority than
"light" tables for paragraph interruption. This is compatible with *older*
versions of GitHub, but 2023-06-21 GitHub treats them the same.

A quick run through <https://babelmark.github.io> shows, of the
implementations that support pipe tables at all[^1]:

| Implementation     -> | a | b | c | d | e | f | g | h | i | j |
| --------------------- | - | - | - | - | - | - | - | - | - | - |
| **pulldown-cmark**    | ✓ | x | x | x | x | ✓ | x | x | ✓ | x |
| github/cmark-gfm      | ✓ | x | ✓ | x | ✓ | ✓ | ✓ | ✓ | ✓ | x |
| pycmarkgfm            | ✓ | x | ✓ | x | ✓ | ✓ | ✓ | ✓ | ✓ | x |
| DFM[^2]               | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | - | - | x |
| league/commonmark GFM | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | x | ✓ | x |
| s9e/TextFormatter     | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | x | x | x |
| markdown-it[^3][^4]   | ✓ | x | ✓ | x | ✓ | ✓ | ✓ | x | - | - |
| php-markdown-extra    | ✓ | x | ✓ | x | ✓ | ✓ | ✓ | x | x | x |
| markdig               | x | x | x | x | x | x | x | x | x | x |
| MD4C                  | x | x | x | x | x | x | x | x | x | x |
| parsedown             | x | x | x | x | x | x | x | x | x | x |
| maruku[^3]            | x | x | x | x | x | x | x | x | x | - |
| cebe                  | x | x | x | x | x | x | x | x | x | x |
| pandoc                | x | x | x | x | x | x | x | x | x | x |
| multimarkdown         | x | x | x | x | x | x | x | x | x | x |

While pulldown-cmark could probably afford to align itself with GFM, tables
interrupting paragraphs is not a portable feature, and anyone trying to write
widely-compatible markdown syntax can't rely on it.

[^1]:
    Implementations that "support pipe tables at all" were identified by
    including "table a" without a preceding paragraph and seeing if it
    produced an HTML table for *that*.

[^2]:
    On "table h" and "table i", DFM sees a table with no cells, followed
    by a paragraph with `b` in it.

[^3]:
    On "table j", maruku and markdown-it see a table with no cells, followed
    by a paragraph with `b` in it.

[^4]:
    On "table i", markdown-it sees a table with no cells, followed
    by a paragraph with `b` in it.

```````````````````````````````` example
table a
|  a  |  b  |
| --- | --- |
|  c  |  d  |


table b
    |  a  |  b  |
    | --- | --- |
    |  c  |  d  |


table c
 a  |  b
--- | ---
 c  |  d


table d
    a | b
    --|--
    c | d


table e
a | b
--|--
c | d

table f
  |  a  |  b  |
  | --- | --- |
  |  c  |  d  |


table g
   a  |  b
  --- | ---
   c  |  d

table h
a
|-|
b

table i
| a
|-
b

table j
| a
-
b
.
<p>table a</p>
<table><thead><tr><th>a</th><th>b</th></tr></thead>
<tr><td>c</td><td>d</td></tr>
</table>
<p>table b
|  a  |  b  |
| --- | --- |
|  c  |  d  |</p>
<p>table c
a  |  b
--- | ---
c  |  d</p>
<p>table d
a | b
--|--
c | d</p>
<p>table e
a | b
--|--
c | d</p>
<p>table f</p>
<table><thead><tr><th>a</th><th>b</th></tr></thead>
<tr><td>c</td><td>d</td></tr>
</table>
<p>table g
a  |  b
--- | ---
c  |  d</p>
<p>table h
a
|-|
b</p>
<p>table i</p>
<table><thead><tr><th>a</th></tr></thead><tbody>
<tr><td>b</td></tr>
</tbody></table>
<h2>table j
| a</h2>
<p>b</p>
````````````````````````````````


Test case based on <https://github.com/github/cmark-gfm/issues/333>.
Normally, we'd follow GFM's lead, but this one seems like a bug,
and Pandoc, the other big, authoritative Extended Markdown parser,
treats it as a table.

Like the example above showing interruption, this ambiguity is tested:

| Implementation     -> | parsed as |
| --------------------- | --------- |
| **pulldown-cmark**    | table     |
| github/cmark-gfm      | list      |
| pycmarkgfm            | list      |
| markdown-it           | table     |
| php-markdown-extra    | table     |
| DFM                   | table     |
| league/commonmark GFM | list      |
| s9e/TextFormatter     | table     |
| markdig               | table     |
| MD4C                  | list      |
| parsedown             | table     |
| maruku                | table     |
| cebe                  | table     |
| pandoc                | table     |
| multimarkdown         | table     |

```````````````````````````````` example
a | b
- | -
1 | 2
.
<table><thead><tr><th>a</th><th>b</th></tr></thead><tbody>
<tr><td>1</td><td>2</td></tr>
</tbody></table>
````````````````````````````````


Hard line breaks are not allowed at the end of table header lines.
It's about a 50:50 split on babelmark, but this change makes pulldown-cmark
consistent with GFM and Pandoc.

| Implementation     -> | parsed as |
| --------------------- | --------- |
| **pulldown-cmark**    | paragraph |
| github/cmark-gfm      | paragraph |
| pycmarkgfm            | paragraph |
| markdown-it           | table     |
| php-markdown-extra    | table     |
| DFM                   | table     |
| league/commonmark GFM | paragraph |
| s9e/TextFormatter     | table     |
| markdig               | paragraph |
| MD4C                  | paragraph |
| parsedown             | table     |
| maruku                | table     |
| cebe                  | paragraph |
| pandoc                | paragraph |
| multimarkdown         | table     |

```````````````````````````````` example
a | b\
- | -
1 | 2
.
<p>a | b\</p>
<ul>
<li>| - 1 | 2</li>
</ul>
````````````````````````````````


As a block structure, table parsing has a higher priority than backslashes.
This is consistent with how other paragraph-interrupting structures work,
and is what GitHub does.

```````````````````````````````` example
a\
| b | c |
|---|---|
| d | e |
.
<p>a\</p>
<table><thead><tr><th>b</th><th>c</th></tr></thead><tbody>
<tr><td>d</td><td>e</td></tr>
</tbody></table>
````````````````````````````````


As a special case, pipes in code blocks in tables are escaped
with backslashes.

The rule is that, if a backslash run (a series of at least one uninterrupted
backslashes) comes immediately before a pipe:

* If the number of backslashes is even, then it doesn't escape the pipe.
* If the number of backslashes is odd, then it escapes the pipe, and it
  renders `floor(n / 2)` backslashes.

This rule is similar to GitHub's, but not identical. See
<https://gist.github.com/notriddle/c027512ee849f12098fec3a3256c89d3>
for what they do. The "Wait, what?" examples are where we diverge,
and the final three examples are why. In any case, all of GitHub's
documented examples pass: it just differs in really weird corner cases.

It's a lot closer to the behavior of Pandoc's `commonmark_x`, but they don't
do the divide-by-two behavior. This means Pandoc's version turns `\|` into a
literal pipe (just like GitHub and pulldown-cmark do), turns `\\|` into a
literal backslash plus a table cell marker (which is what pulldown-cmark does,
but not what GitHub does), and turns `\\\|` into two literal backslashes
plus a literal pipe (which means there's no way to represent a single
backslash followed by a single pipe in their syntax).

```````````````````````````````` example
| Description | Test case |
|-------------|-----------|
| Single      | `\`       |
| Double      | `\\`      |
| Basic test  | `\|`      |
| Basic test 2| `\|\|\`   |
| Basic test 3| `x\|y\|z\`|
| Not pipe    | `\.`      |
| Combo       | `\.\|\`   |
| Extra       | `\\\.`    |
| Wait, what? | `\\|`     |
| Wait, what? | `\\\|`    |
| Wait, what? | `\\\\|`   |
| Wait, what? | `\\\\\|`  |
| Wait, what? |          \|
| Wait, what? |         \\|
| Wait, what? |        \\\|
.
<table><thead><tr><th>Description</th><th>Test case</th></tr></thead><tbody>
<tr><td>Single</td><td><code>\</code></td></tr>
<tr><td>Double</td><td><code>\\</code></td></tr>
<tr><td>Basic test</td><td><code>|</code></td></tr>
<tr><td>Basic test 2</td><td><code>||\</code></td></tr>
<tr><td>Basic test 3</td><td><code>x|y|z\</code></td></tr>
<tr><td>Not pipe</td><td><code>\.</code></td></tr>
<tr><td>Combo</td><td><code>\.|\</code></td></tr>
<tr><td>Extra</td><td><code>\\\.</code></td></tr>
<tr><td>Wait, what?</td><td>`\</td></tr>
<tr><td>Wait, what?</td><td><code>\|</code></td></tr>
<tr><td>Wait, what?</td><td>`\\</td></tr>
<tr><td>Wait, what?</td><td><code>\\|</code></td></tr>
<tr><td>Wait, what?</td><td>|</td></tr>
<tr><td>Wait, what?</td><td>\</td></tr>
<tr><td>Wait, what?</td><td>\|</td></tr>
</tbody></table>
````````````````````````````````
