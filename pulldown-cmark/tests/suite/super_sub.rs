// This file is auto-generated by the build script
// Please, do not modify it manually

use super::test_markdown_html;

#[test]
fn super_sub_test_1() {
    let original = r##"^This is super^ ~This is sub~
"##;
    let expected = r##"<p><sup>This is super</sup> <sub>This is sub</sub></p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_2() {
    let original = r##"~This is stricken out~
"##;
    let expected = r##"<p><sub>This is stricken out</sub></p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_3() {
    let original = r##"~This is \~stricken~
"##;
    let expected = r##"<p><sub>This is ~stricken</sub></p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_4() {
    let original = r##"~This~is~nothing~
"##;
    let expected = r##"<p><sub>This</sub>is<sub>nothing</sub></p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_5() {
    let original = r##"~This ~~is not stricken.~
"##;
    let expected = r##"<p><sub>This ~~is not stricken.</sub></p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_6() {
    let original = r##"~~This ~is~~ stricken.~
"##;
    let expected = r##"<p><del>This ~is</del> stricken.~</p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_7() {
    let original = r##"~This ~~is stricken~ but this is not~~
"##;
    let expected = r##"<p><sub>This ~~is stricken</sub> but this is not~~</p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_8() {
    let original = r##"H~2~O

y=x^2^a+xb+c
"##;
    let expected = r##"<p>H<sub>2</sub>O</p>
<p>y=x<sup>2</sup>a+xb+c</p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_9() {
    let original = r##"~foo~~

^bar^^
"##;
    let expected = r##"<p>~foo~~</p>
<p>^bar^^</p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}

#[test]
fn super_sub_test_10() {
    let original = r##"~foo^~^bar~

*foo_*_bar*
"##;
    let expected = r##"<p><sub>foo^</sub>^bar~</p>
<p><em>foo_</em>_bar*</p>
"##;

    test_markdown_html(original, expected, false, false, false, true, false, false, false);
}
